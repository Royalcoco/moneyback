const express = require('express');
const Web3 = require('web3');
const { ethers } = require('ethers');
const bodyParser = require('body-parser');
const { verifyIdentity, monitorTransactions } = require('./securityService');

const app = express();
app.use(bodyParser.json());

const provider = new ethers.providers.JsonRpcProvider('https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID');
const privateKey = 'YOUR_PRIVATE_KEY';
const wallet = new ethers.Wallet(privateKey, provider);
const contractAddress = 'YOUR_CONTRACT_ADDRESS';
const contractABI = require('./SecureExchange.json').abi;
const contract = new ethers.Contract(contractAddress, contractABI, wallet);

app.post('/initiate', async (req, res) => {
  const { counterparty, token, amount } = req.body;
  try {
    const tx = await contract.initiateExchange(counterparty, token, amount);
    await tx.wait();
    res.json({ success: true, txHash: tx.hash });
  } catch (error) {
    res.json({ success: false, error: error.message });
  }
});

app.post('/approve', async (req, res) => {
  const { exchangeId } = req.body;
  try {
    const tx = await contract.approveExchange(exchangeId);
    await tx.wait();
    res.json({ success: true, txHash: tx.hash });
  } catch (error) {
    res.json({ success: false, error: error.message });
  }
});

app.post('/freeze', async (req, res) => {
  const { exchangeId } = req.body;
  try {
    const tx = await contract.freezeFunds(exchangeId);
    await tx.wait();
    res.json({ success: true, txHash: tx.hash });
  } catch (error) {
    res.json({ success: false, error: error.message });
  }
});

app.post('/unfreeze', async (req, res) => {
  const { exchangeId } = req.body;
  try {
    const tx = await contract.unfreezeFunds(exchangeId);
    await tx.wait();
    res.json({ success: true, txHash: tx.hash });
  } catch (error) {
    res.json({ success: false, error: error.message });
  }
});

app.listen(3000, () => {
  console.log('Secure Exchange app listening on port 3000');
});
