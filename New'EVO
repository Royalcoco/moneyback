// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract EvoCoin {
    string public name = "EvoCoin";
    string public symbol = "EVO";
    uint8 public decimals = 18;
    uint256 public totalSupply = 1000000 * (10 ** uint256(decimals));

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Evaporated(address indexed from, uint256 value);

    constructor() {
        balanceOf[msg.sender] = totalSupply;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value, "Insufficient balance");
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        evaporate(_to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= balanceOf[_from], "Insufficient balance");
        require(_value <= allowance[_from][msg.sender], "Allowance exceeded");
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        evaporate(_to, _value);
        return true;
    }

    function evaporate(address _from, uint256 _value) internal {
        balanceOf[_from] -= _value;
        totalSupply -= _value;
        emit Evaporated(_from, _value);
    }

    function mint(address _to, uint256 _value) public {
        require(totalSupply + _value <= 1000000 * (10 ** uint256(decimals)), "Max supply reached");
        balanceOf[_to] += _value;
        totalSupply += _value;
        emit Transfer(address(0), _to, _value);
    }

    function convertToFiat(address _from, uint256 _value, string memory fiatCurrency) public returns (uint256) {
        // Placeholder for integration with an external service to convert EVO to fiat currency
        // This function should interact with an external API to get the conversion rate
        uint256 fiatAmount = _value * 1; // Assume 1 EVO = 1 fiat unit for simplicity
        evaporate(_from, _value);
        return fiatAmount;
    }
}
